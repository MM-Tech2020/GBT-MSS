<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ include file="T4Helper.ttinclude" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#  //Set these options
    string targetNamespace = "SSO.Model";
	string projectNamespace= "SSO.DataAccessLayer";
	bool regenerateEachTime= true;
    string efContext = "SSOContext"; //If Context is not in the same namespace rename this to the name of the context

    IServiceProvider serviceProvider = (IServiceProvider)this.Host;
    DTE dte = serviceProvider.GetService(typeof(DTE)) as DTE; 
    var project = GetActiveProject(dte);

    var classes = FindClasses(project, targetNamespace, "");
    var classWithDbContext = classes.FirstOrDefault(currentClass => currentClass.Bases.OfType<CodeElement>().Any(currentBase => currentBase.Name == "DbContext"));

    var classNames = classes
                    .Select(currentClass => currentClass.Name)
                    .ToList();

    if(classWithDbContext != null)
    {
        efContext = classWithDbContext.Name;
        classNames.Remove(efContext);
    }

    GenerateRepositoryFromPoco(project, targetNamespace, classNames, efContext, projectNamespace);
#>
using System;
namespace <#= projectNamespace #>
{
public interface IUnitOfWork : IDisposable
{
    <#
    foreach(string className in classNames)
    {
        var properClassName = GetProperClassName(className);
        var repositoryInterfaceName = "I" + properClassName + "Repository";
    #>
<#= repositoryInterfaceName + " " + className+"s" #> { get; }
    <#
    }
    #>
void Save();
}
}
<# CreateFile("IUnitofWork.cs", true); #>

using System;

using <#= targetNamespace #>;
namespace <#= projectNamespace #>
{
public class UnitOfWork : IUnitOfWork
{
    private <#= efContext #> _context;

    public UnitOfWork(<#= efContext #> context)
    {
        _context = context;
    }

	//Delete this default constructor if using an IoC container
	public UnitOfWork()
	{
		_context = new <#= efContext #>();
	}
	
    <#foreach(string className in classNames)
    {
        var properClassName = GetProperClassName(className);
        var repositoryInterfaceName =  "I" + properClassName + "Repository";
    #>
public <#= repositoryInterfaceName + " " + className+"s"#>
    {
        get { return new <#= properClassName + "Repository" #>(_context); }
    }

    <#}#>

    public void Save()
    {
        _context.SaveChanges();
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            if (_context != null)
            {
                _context.Dispose();
                _context = null;
            }
        }
    }
}
}
<# CreateFile("UnitofWork.cs", true); #>
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using <#= targetNamespace #>;
namespace <#= projectNamespace #>
{
public abstract class GenericDataRepository<TEntity> : IGenericDataRepository<TEntity> where TEntity : class
{
    private <#= efContext #> _context;
	protected DbSet<TEntity> _dbSet;

    protected GenericDataRepository(<#= efContext #> entitycontext)
    {
        _context = entitycontext;
		_dbSet = _context.Set<TEntity>();
    }

    public IList<TEntity> Add(List<TEntity> items)
        {
            
                foreach (TEntity item in items)
                {
                    _context.Entry(item).State = EntityState.Added;
                }

                //_context.SaveChanges();
            
            return items;
        }
		public void Add(TEntity item)
        {
            _dbSet.Add(item);
            //_context.SaveChanges();
        }

        public void Update(TEntity item)
        {
            _context.Entry(item).State = EntityState.Modified;
            //_context.SaveChanges();
        }

        public IList<TEntity> Update(List<TEntity> items)
        {
            
                foreach (TEntity item in items)
                {
                    _context.Entry(item).State = EntityState.Modified;
                }

                //_context.SaveChanges();
            

            return items;
        }

        public IList<TEntity> Remove(IList<TEntity> items)
        { 
		        
                foreach (TEntity item in items)
                {
                    _context.Entry(item).State = EntityState.Deleted;
                }

                //_context.SaveChanges();
            return items;
        }

        public IList<TEntity> GetAll(List<Expression<Func<TEntity, object>>> navigationProperties)
        {
            List<TEntity> list;           
                IQueryable<TEntity> dbQuery = _context.Set<TEntity>();

                //Apply eager loading
                foreach (Expression<Func<TEntity, object>> navigationProperty in navigationProperties)
                    dbQuery = dbQuery.Include<TEntity, object>(navigationProperty);

                list = dbQuery.AsNoTracking().ToList<TEntity>();
                return list;

        
        }

        public IList<TEntity> GetList(Func<TEntity, bool> where, List<Expression<Func<TEntity, object>>> navigationProperties)
        {
            List<TEntity> list;
            
                IQueryable<TEntity> dbQuery = _context.Set<TEntity>();

                //Apply eager loading
                foreach (Expression<Func<TEntity, object>> navigationProperty in navigationProperties)
                    dbQuery = dbQuery.Include<TEntity, object>(navigationProperty);

                list = dbQuery.AsNoTracking().Where(where).ToList<TEntity>();
                return list;

           
        }

        public IList<TEntity> GetLists(List< Expression<Func<TEntity, bool>>> wheres)
        {

            List<TEntity> list;
                IQueryable<TEntity> dbQuery = _context.Set<TEntity>();

                //Apply eager loading
                foreach (Expression<Func<TEntity, bool>> wh in wheres)
                    dbQuery = dbQuery.AsNoTracking<TEntity>().Where(wh);


                list = dbQuery.ToList<TEntity>();
                return list;           
        }

        /**
         * Cannot GetByID as we have diffrent IDs names
         **/
        /*public TEntity GetByID(int ID)
        {
            throw new NotImplementedException();
        }*/


        // get navigation properties
        public List<Expression<Func<TEntity, object>>> GetNavigationProperties()
        {
            List<Expression<Func<TEntity, object>>> navigationProperties = new List<Expression<Func<TEntity, object>>>();
            // include navigation properties
            return navigationProperties;
        }

		public IList<TEntity> GetAll()
        {
            return _dbSet.ToList();
        }

        public TEntity GetById(object id)
        {
            return _dbSet.Find(id);
        }
        public TEntity FindOne(Func<TEntity, bool> condition)
        {
            return _dbSet.FirstOrDefault(condition);
        }

        public IList<TEntity> FindList(Func<TEntity, bool> condition)
        {

            IEnumerable<TEntity> results = _dbSet.Where(condition);

            if (results == null || results.Count() < 1)
                return null;

            return results.ToList();

        }
}
}
<# CreateFile("GenericDataRepository.cs", true); #>
using System.Collections.Generic;
using System.Linq.Expressions;
using System;

namespace <#= projectNamespace #>
{
public interface IGenericDataRepository<T> where T : class
{
        
        IList<T> GetAll(List<Expression<Func<T, object>>> navigationProperties);
        IList<T> GetList(Func<T, bool> where, List<Expression<Func<T, object>>> navigationProperties);

        IList<T> GetLists(List<Expression<Func<T, bool>>> wheres);

        //T GetByID(int ID);
        IList<T> Add(List<T> items);
        void Add(T item);
		IList<T> Update(List<T> items);
		void Update(T item);
        IList<T> Remove(IList<T> items);


        List<Expression<Func<T, object>>> GetNavigationProperties();
		IList<T> GetAll();
		T GetById(object id);
		T FindOne(Func<T, bool> condition);
		IList<T> FindList(Func<T, bool> condition);
}
}
<# CreateFile("IGenericDataRepository.cs", true); #>
<#+
    public void GenerateRepositoryFromPoco(Project project, string targetNamespace, List<string> classNames, string efContext, string projectNamespace)
    {
        foreach(string className in classNames)
        {
            var properClassName = GetProperClassName(className);
            var repositoryName = properClassName + "Repository";
            #>    
using <#= targetNamespace #>;
namespace <#= projectNamespace #>
{              
public partial class <#= repositoryName #> : GenericDataRepository<<#= className #>>, I<#= properClassName #>Repository
{
    private <#= efContext #> _context;
	

    public <#= repositoryName #>(<#= efContext #> entitycontext) : base(entitycontext)
    {
        _context = entitycontext;
    }

    //Override any generic method for your own custom implemention, add new repository methods to the I<#= repositoryName #>.cs file
}
}
<#+  CreateFile(repositoryName + ".cs", true); #>
using <#= targetNamespace #>;
namespace <#= projectNamespace #>
{
public partial interface I<#= properClassName #>Repository : IGenericDataRepository<<#= className #>>
{
    //Add any additional repository methods other than the generic ones (GetAll, GetById, Delete, Add)
}
}
<#+ CreateFile(@"I" + repositoryName + ".cs", true); #>
            <#+
        }
    }
#>